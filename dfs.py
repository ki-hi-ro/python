grid = [
    [1, 5],
    [0, 9]
]

H, W = len(grid), len(grid[0])
directions = [(1,0), (-1,0), (0,1), (0,-1)]

max_score = 0
best_path = []

def dfs(y, x, visited, total, path):
    global max_score, best_path
    # ÁèæÂú®„ÅÆÁä∂ÊÖã„ÇíÂá∫Âäõ
    print(f"{path} ‚Üí ÂêàË®à={total}")

    # ÊúÄÂ§ßÂÄ§„ÅÆÊõ¥Êñ∞
    if total > max_score:
        max_score = total
        best_path = path[:]

    # 4ÊñπÂêë„Å∏Êé¢Á¥¢
    for dy, dx in directions:
        ny, nx = y + dy, x + dx
        if 0 <= ny < H and 0 <= nx < W and (ny, nx) not in visited:
            dfs(ny, nx, visited | {(ny, nx)}, total + grid[ny][nx], path + [(ny, nx)])


print("=== ÂÜçÂ∏∞ÁöÑDFS„ÅßÂÖ®„Éë„Çø„Éº„É≥Êé¢Á¥¢ ===")
for y in range(H):
    for x in range(W):
        start_val = grid[y][x]
        dfs(y, x, {(y, x)}, start_val, [(y, x)])

print("\nüèÜ ÊúÄÂ§ßÂêàË®à:", max_score)
print("ÈÄö„Å£„ÅüÂ∫ßÊ®ô:", best_path)